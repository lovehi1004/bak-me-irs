package gov.me.irs.core.enumeration;

import java.util.Arrays;

import gov.me.irs.core.token.constants.JwtConst;
import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * 시스템 공통 JWT 인증코드 Enum
 * 
 * @author Justin
 *
 */
@Getter
@AllArgsConstructor
public enum JwtAuthEnum implements CoreResponseEnumType {

	AUTHENTICATION_ACCESS_UNKNOWN_ERROR(
			JwtConst.AUTH_CODE.AUTHENTICATION_ACCESS_UNKNOWN_ERROR,
			JwtConst.AUTH_MESSAGE.AUTHENTICATION_ACCESS_UNKNOWN_ERROR),				//accessToken 누락시
	
	AUTHENTICATION_REFRESH_UNKNOWN_ERROR(
			JwtConst.AUTH_CODE.AUTHENTICATION_REFRESH_UNKNOWN_ERROR,
			JwtConst.AUTH_MESSAGE.AUTHENTICATION_REFRESH_UNKNOWN_ERROR),			//refreshToken 누락시
	
	AUTHENTICATION_EXPIRED_TOKEN(
			JwtConst.AUTH_CODE.AUTHENTICATION_EXPIRED_TOKEN,
			JwtConst.AUTH_MESSAGE.AUTHENTICATION_EXPIRED_TOKEN),					//둘다 만료시
	
	AUTHENTICATION_REFRESH_UNSUPPORTED_TOKEN(
			JwtConst.AUTH_CODE.AUTHENTICATION_REFRESH_UNSUPPORTED_TOKEN,
			JwtConst.AUTH_MESSAGE.AUTHENTICATION_REFRESH_UNSUPPORTED_TOKEN),		//refreshToken 변조시
	
	AUTHENTICATION_EXTRA_ERROR_8011(
			JwtConst.AUTH_CODE.AUTHENTICATION_EXTRA_ERROR_8011,
			JwtConst.AUTH_MESSAGE.AUTHENTICATION_EXTRA_ERROR_8011),					//catch 영역
	
	AUTHENTICATION_EXTRA_ERROR_8012(
			JwtConst.AUTH_CODE.AUTHENTICATION_EXTRA_ERROR_8012,
			JwtConst.AUTH_MESSAGE.AUTHENTICATION_EXTRA_ERROR_8012),					//catch 영역
	
	AUTHENTICATION_EXTRA_ERROR_8013(
			JwtConst.AUTH_CODE.AUTHENTICATION_EXTRA_ERROR_8013,
			JwtConst.AUTH_MESSAGE.AUTHENTICATION_EXTRA_ERROR_8013),					//catch 영역
	
	AUTHENTICATION_ACCESS_DENIED(
			JwtConst.AUTH_CODE.AUTHENTICATION_ACCESS_DENIED,
			JwtConst.AUTH_MESSAGE.AUTHENTICATION_ACCESS_DENIED),
	
	AUTHENTICATION_PREAUTHORIZE_ACCESS_DENIED(
			JwtConst.AUTH_CODE.AUTHENTICATION_PREAUTHORIZE_ACCESS_DENIED,
			JwtConst.AUTH_MESSAGE.AUTHENTICATION_PREAUTHORIZE_ACCESS_DENIED),		//@PreAuthorize 전용 예외처리
	
	NOT_FOUND_USER_ID(
			JwtConst.AUTH_CODE.NOT_FOUND_USER_ID,
			JwtConst.AUTH_MESSAGE.NOT_FOUND_USER_ID),
	
	NOT_FOUND_USER_PWD(
			JwtConst.AUTH_CODE.NOT_FOUND_USER_PWD,
			JwtConst.AUTH_MESSAGE.NOT_FOUND_USER_PWD),
	
	MISMATCH_USER_INFO(
			JwtConst.AUTH_CODE.MISMATCH_USER_INFO,
			JwtConst.AUTH_MESSAGE.MISMATCH_USER_INFO),
	
	LOGIN(
			JwtConst.AUTH_CODE.LOGIN,
			JwtConst.AUTH_MESSAGE.LOGIN),
	
	LOGOUT(
			JwtConst.AUTH_CODE.LOGOUT,
			JwtConst.AUTH_MESSAGE.LOGOUT),
	
	LOGOUT_UNKNOWN_STATE(
			JwtConst.AUTH_CODE.LOGOUT_UNKNOWN_STATE,
			JwtConst.AUTH_MESSAGE.LOGOUT_UNKNOWN_STATE),
	
	LOGOUT_MISSING_PARAMETERS(
			JwtConst.AUTH_CODE.LOGOUT_MISSING_PARAMETERS,
			JwtConst.AUTH_MESSAGE.LOGOUT_MISSING_PARAMETERS),
	
	OK(
			JwtConst.AUTH_CODE.OK,
			JwtConst.AUTH_MESSAGE.OK),				//응답 성공
	
	BAD_REQUEST(
			JwtConst.AUTH_CODE.BAD_REQUEST,
			JwtConst.AUTH_MESSAGE.BAD_REQUEST),
	
	NOT_FOUND(
			JwtConst.AUTH_CODE.NOT_FOUND,
			JwtConst.AUTH_MESSAGE.NOT_FOUND),
	
	METHOD_NOT_ALLOWED(
			JwtConst.AUTH_CODE.METHOD_NOT_ALLOWED,
			JwtConst.AUTH_MESSAGE.METHOD_NOT_ALLOWED),
	
	NOT_ACCEPTABLE(
			JwtConst.AUTH_CODE.NOT_ACCEPTABLE,
			JwtConst.AUTH_MESSAGE.NOT_ACCEPTABLE),
	
	/* 파일업로드 코드 */
	MAX_UPLOAD_SIZE_EXCEEDED_EXCEPTION(
			JwtConst.AUTH_CODE.MAX_UPLOAD_SIZE_EXCEEDED_EXCEPTION,
			JwtConst.AUTH_MESSAGE.MAX_UPLOAD_SIZE_EXCEEDED_EXCEPTION),
	
	BAD_UPLOAD_REQUEST(
			JwtConst.AUTH_CODE.BAD_UPLOAD_REQUEST,
			JwtConst.AUTH_MESSAGE.BAD_UPLOAD_REQUEST),
	
	UNKNOWN_ERROR(
			JwtConst.AUTH_CODE.UNKNOWN_ERROR,
			JwtConst.AUTH_MESSAGE.UNKNOWN_ERROR),
	
	AUTHENTICATION_UNKNOWN_ERROR(
			JwtConst.AUTH_CODE.AUTHENTICATION_UNKNOWN_ERROR,
			JwtConst.AUTH_MESSAGE.AUTHENTICATION_UNKNOWN_ERROR);

    private int code;
    private String message;
    
    public static JwtAuthEnum of(int code) {
    	return Arrays.stream(JwtAuthEnum.values())
    			.filter(r -> r.getCode() == code)
    			.findAny()
    			.orElse(AUTHENTICATION_UNKNOWN_ERROR);
    }
}